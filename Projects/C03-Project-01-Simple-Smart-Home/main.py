import time
from EdgeServer import Edge_Server
from LightDevice import Light_Device
from ACDevice import AC_Device

WAIT_TIME = 3

print("\nSMART HOME SIMULATION STARTED ")
# Creating the edge-server for the communication with the user

print("\nEDGE SERVER INITIATION STARTED" )
edge_server_1 = Edge_Server('edge_server_1')
time.sleep(WAIT_TIME)

print("\nEDGE SERVER INITIATION COMPLETED SUCCESSFULLY AND CONNECTED TO BROKER\n" )


print("SECTION 1: STARTING REGISTRATION OF LIGHT DEVICES \n" )

print("\nREGISTERING LIGHT 1 IN KITCHEN")
light_device_1 = Light_Device("light_1", "Kitchen")
time.sleep(WAIT_TIME)



print("\nREGISTERING LIGHT 2 IN BED ROOM 1")
light_device_2 = Light_Device("light_2", "Bed Room1")
time.sleep(WAIT_TIME)

print("\nREGISTERING LIGHT 3 IN GARAGE")
light_device_3 = Light_Device("light_3", "Garage")
time.sleep(WAIT_TIME)

print("\nREGISTERING LIGHT 4 IN BEDROOM2")
light_device_4 = Light_Device("light_4", "Bed Room2")
time.sleep(WAIT_TIME)

print("\nREGISTERING LIGHT 5 IN LIVING ROOM")
light_device_5 = Light_Device("light_5", "Living Room")
time.sleep(WAIT_TIME)

print("SMART HOME SECTION 1 STARTING REGISTRATION OF AC DEVICES \n" )

print("\nREGISTERING AC1 IN BED ROOM 1")
ac_device_1 = AC_Device("ac_1", "Bed Room1")
time.sleep(WAIT_TIME)

print("\nREGISTERING AC2 IN LIVING ROOM ")
ac_device_2 = AC_Device("ac_2", "Living Room")
time.sleep(WAIT_TIME)

print("\nREGISTERING AC3 IN LIVING ROOM ")
ac_device_3 = AC_Device("ac_3", "Living Room")
time.sleep(WAIT_TIME)

registered_device_list=edge_server_1.get_registered_device_list()
print("ALL DEVICES REGISTERED SUCCESSFULLY REGISTERED IDS:\n\n", registered_device_list)
time.sleep(WAIT_TIME)


print("\nSECTION 2.A.1 STARTING TO GET ALL DEVICES STATUS BY DEVICE ID")

print("\nGET STATUS COMMAND SENDING TO LIGHT1")
FILTER_BY="DEVICE_ID"
DEVICE_ID="light_1"
edge_server_1.get_status(FILTER_BY,DEVICE_ID)
time.sleep(WAIT_TIME)

print("\n GET STATUS COMMAND SENDING TO LIGHT2")
FILTER_BY="DEVICE_ID"
DEVICE_ID="light_2"
edge_server_1.get_status(FILTER_BY,DEVICE_ID)
time.sleep(WAIT_TIME)

print("\nGET STATUS COMMAND SENDING TO LIGHT3")
FILTER_BY="DEVICE_ID"
DEVICE_ID="light_3"
edge_server_1.get_status(FILTER_BY,DEVICE_ID)
time.sleep(WAIT_TIME)

print("\nGET STATUS COMMAND SENDING TO LIGHT4")
FILTER_BY="DEVICE_ID"
DEVICE_ID="light_4"
edge_server_1.get_status(FILTER_BY,DEVICE_ID)
time.sleep(WAIT_TIME)

print("\nGET STATUS COMMAND SENDING TO LIGHT5")
FILTER_BY="DEVICE_ID"
DEVICE_ID="light_5"
edge_server_1.get_status(FILTER_BY,DEVICE_ID)
time.sleep(WAIT_TIME)

print("\nGET STATUS COMMAND SENDING TO AC1")
FILTER_BY="DEVICE_ID"
DEVICE_ID="ac_1"
edge_server_1.get_status(FILTER_BY,DEVICE_ID)
time.sleep(WAIT_TIME)

print("\nGET STATUS COMMAND SENDING TO AC2")
FILTER_BY="DEVICE_ID"
DEVICE_ID="ac_2"
edge_server_1.get_status(FILTER_BY,DEVICE_ID)
time.sleep(WAIT_TIME)


print("\nGET STATUS COMMAND SENDING TO AC3")
FILTER_BY="DEVICE_ID"
DEVICE_ID="ac_3"
edge_server_1.get_status(FILTER_BY,DEVICE_ID)
time.sleep(WAIT_TIME)

print("\nSECTION 2.A.2 STARTING TO GET ALL DEVICES STATUS BY DEVICE TYPE AS LIGHT")

DEVICE_ID="NOT_CRITERIA"
FILTER_BY="DEVICE_TYPE"
FLAG_DEVICE_TYPE="LIGHT"
FLAG_ROOM_TYPE="NOT_EXITS"
edge_server_1.get_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE)
time.sleep(WAIT_TIME)

print("\nSECTION 2.A.2 STARTING TO GET ALL DEVICES STATUS BY DEVICE TYPE AS AC")

DEVICE_ID="NOT_CRITERIA"
FILTER_BY="DEVICE_TYPE"
FLAG_DEVICE_TYPE="AC"
FLAG_ROOM_TYPE="NOT_EXITS"
edge_server_1.get_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE)
time.sleep(WAIT_TIME)


print("\nSECTION 2.A.2 STARTING TO GET ALL DEVICES STATUS BY ROOM AS LIVING ROOM")

DEVICE_ID="NOT_CRITERIA"
FILTER_BY="ROOM"
FLAG_DEVICE_TYPE="NOT_EXITS"
FLAG_ROOM_TYPE="Living Room"
edge_server_1.get_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE)
time.sleep(WAIT_TIME)

print("\nSECTION 2.A.2 STARTING TO GET ALL DEVICES STATUS BY HOME")

DEVICE_ID="NOT_CRITERIA"
FILTER_BY="HOME"
FLAG_DEVICE_TYPE="NOT_EXITS"
FLAG_ROOM_TYPE="NOT_EXITS"
edge_server_1.get_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE)
time.sleep(WAIT_TIME)



print("\nSECTION 2.B STARTING TO SET ALL DEVICES SWITCH STATUS ON BY DEVICE ID")

print("\nCOMMAND SENDING TO LIGHT 1 TO SWITCH STATE:ON INTENSITY:MEDIUM")
FILTER_BY="DEVICE_ID"
DEVICE_ID="light_1"
FLAG_DEVICE_TYPE="NOT_EXITS"
FLAG_ROOM_TYPE="NOT_EXITS"
FLAG_SWITCH_STATE="ON"
FLAG_TEMP_STATE="NOT_EXITS"
FLAG_INTENSITY="MEDIUM"

edge_server_1.set_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE,FLAG_SWITCH_STATE,FLAG_TEMP_STATE,FLAG_INTENSITY)
time.sleep(WAIT_TIME)

print("\nSET COMMAND SENDING TO LIGHT 2 TO SWITCH STATE:ON INTENSITY:HIGH")
FILTER_BY="DEVICE_ID"
DEVICE_ID="light_2"
FLAG_DEVICE_TYPE="NOT_EXITS"
FLAG_ROOM_TYPE="NOT_EXITS"
FLAG_SWITCH_STATE="ON"
FLAG_TEMP_STATE="NOT_EXITS"
FLAG_INTENSITY="HIGH"

edge_server_1.set_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE,FLAG_SWITCH_STATE,FLAG_TEMP_STATE,FLAG_INTENSITY)
time.sleep(WAIT_TIME)


print("\nSET COMMAND SENDING TO LIGHT 3 TO SWITCH STATE:ON INTENSITY:HIGH")
FILTER_BY="DEVICE_ID"
DEVICE_ID="light_3"
FLAG_DEVICE_TYPE="NOT_EXITS"
FLAG_ROOM_TYPE="NOT_EXITS"
FLAG_SWITCH_STATE="ON"
FLAG_TEMP_STATE="NOT_EXITS"
FLAG_INTENSITY="HIGH"

edge_server_1.set_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE,FLAG_SWITCH_STATE,FLAG_TEMP_STATE,FLAG_INTENSITY)
time.sleep(WAIT_TIME)

print("\nSET COMMAND SENDING TO LIGHT 4 TO SWITCH STATE:ON INTENSITY:MEDIUM")
FILTER_BY="DEVICE_ID"
DEVICE_ID="light_4"
FLAG_DEVICE_TYPE="NOT_EXITS"
FLAG_ROOM_TYPE="NOT_EXITS"
FLAG_SWITCH_STATE="ON"
FLAG_TEMP_STATE="NOT_EXITS"
FLAG_INTENSITY="MEDIUM"

edge_server_1.set_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE,FLAG_SWITCH_STATE,FLAG_TEMP_STATE,FLAG_INTENSITY)
time.sleep(WAIT_TIME)

print("\nSET COMMAND SENDING TO LIGHT 5 TO SWITCH STATE:ON INTENSITY:HIGH")
FILTER_BY="DEVICE_ID"
DEVICE_ID="light_5"
FLAG_DEVICE_TYPE="NOT_EXITS"
FLAG_ROOM_TYPE="NOT_EXITS"
FLAG_SWITCH_STATE="ON"
FLAG_TEMP_STATE="NOT_EXITS"
FLAG_INTENSITY="HIGH"

edge_server_1.set_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE,FLAG_SWITCH_STATE,FLAG_TEMP_STATE,FLAG_INTENSITY)
time.sleep(WAIT_TIME)

print("\nSET COMMAND SENDING TO AC 1 TO SWITCH STATE:ON TEMP:29")
FILTER_BY="DEVICE_ID"
DEVICE_ID="ac_1"
FLAG_DEVICE_TYPE="NOT_EXITS"
FLAG_ROOM_TYPE="NOT_EXITS"
FLAG_SWITCH_STATE="ON"
FLAG_TEMP_STATE="29"
FLAG_INTENSITY="NOT_EXITS"

edge_server_1.set_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE,FLAG_SWITCH_STATE,FLAG_TEMP_STATE,FLAG_INTENSITY)
time.sleep(WAIT_TIME)

print("\nSET COMMAND SENDING TO AC 2 TO SWITCH STATE:ON TEMP:18")
FILTER_BY="DEVICE_ID"
DEVICE_ID="ac_2"
FLAG_DEVICE_TYPE="NOT_EXITS"
FLAG_ROOM_TYPE="NOT_EXITS"
FLAG_SWITCH_STATE="ON"
FLAG_TEMP_STATE="18"
FLAG_INTENSITY="NOT_EXITS"

edge_server_1.set_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE,FLAG_SWITCH_STATE,FLAG_TEMP_STATE,FLAG_INTENSITY)
time.sleep(WAIT_TIME)

print("\nSET COMMAND SENDING TO AC 3 TO SWITCH STATE:ON TEMP:27")
FILTER_BY="DEVICE_ID"
DEVICE_ID="ac_3"
FLAG_DEVICE_TYPE="NOT_EXITS"
FLAG_ROOM_TYPE="NOT_EXITS"
FLAG_SWITCH_STATE="ON"
FLAG_TEMP_STATE="27"
FLAG_INTENSITY="NOT_EXITS"

edge_server_1.set_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE,FLAG_SWITCH_STATE,FLAG_TEMP_STATE,FLAG_INTENSITY)
time.sleep(WAIT_TIME)

print("\nSECTION 3.A.1 STARTING TO SEND COMMAND TO ALL LIGHTS  BY DEVICE TYPE CRTITERIA")

print("\nSET STATUS BY DEVICE ID: STARTING TO SEND COMMAND  ALL LIGHT DEVICES TO SET INTENSITY TO HIGH  BY DEVICE TYPE AS LIGHT")
FILTER_BY="DEVICE_TYPE"
DEVICE_ID="NOT_CRITERIA"
FLAG_DEVICE_TYPE="LIGHT"
FLAG_ROOM_TYPE="NOT_EXITS"
FLAG_SWITCH_STATE="ON"
FLAG_TEMP_STATE="NOT_EXITS"
FLAG_INTENSITY="HIGH"

edge_server_1.set_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE,FLAG_SWITCH_STATE,FLAG_TEMP_STATE,FLAG_INTENSITY)
time.sleep(WAIT_TIME)


print("\nSECTION 3.A.2 WRONG COMMAND CHECK SET STATUS  FOR DEVICE ID:LIGHT_1 WRONG MESSAGE DETECTION")

FILTER_BY="DEVICE_ID"
DEVICE_ID="light_1"
FLAG_DEVICE_TYPE="LIGHT"
FLAG_ROOM_TYPE="NOT_EXITS"
FLAG_SWITCH_STATE="ON"
FLAG_TEMP_STATE="29"
FLAG_INTENSITY="NOT_EXITS"

edge_server_1.set_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE,FLAG_SWITCH_STATE,FLAG_TEMP_STATE,FLAG_INTENSITY)
time.sleep(WAIT_TIME)


print("\nSECTION 3.B.1 STARTING TO SEND COMMAND TO ALL AC DEVICES TO SET TEMPERATURE:29 BY DEVICE TYPE CRITERIA")

print("\nSET STATUS BY DEVICE TYPE:STARTING TO SET ALL AC DEVICES TEMP TO 29 BY DEVICE TYPE AS AC")
FILTER_BY="DEVICE_TYPE"
DEVICE_ID="NOT_CRITERIA"
FLAG_DEVICE_TYPE="AC"
FLAG_ROOM_TYPE="NOT_EXITS"
FLAG_SWITCH_STATE="ON"
FLAG_TEMP_STATE="29"
FLAG_INTENSITY="NOT_EXITS"

edge_server_1.set_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE,FLAG_SWITCH_STATE,FLAG_TEMP_STATE,FLAG_INTENSITY)
time.sleep(WAIT_TIME)


print("\nSECTION 3.B.2 WRONG COMMAND CHECK SET STATUS  FOR DEVICE ID:AC_3 WRONG MESSAGE DETECTION")

FILTER_BY="DEVICE_ID"
DEVICE_ID="ac_3"
FLAG_DEVICE_TYPE="AC"
FLAG_ROOM_TYPE="NOT_EXITS"
FLAG_SWITCH_STATE="ON"
FLAG_TEMP_STATE="NOT_EXITS"
FLAG_INTENSITY="MEDIUM"

edge_server_1.set_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE,FLAG_SWITCH_STATE,FLAG_TEMP_STATE,FLAG_INTENSITY)
time.sleep(WAIT_TIME)


print("\nPROJECT CONCLUSION ALL DEVICES STATUS IN HOME")

print("\nSEND COMMAND TO GET ALL DEVICES IN HOME ")
DEVICE_ID="NOT_CRITERIA"
FILTER_BY="HOME"
FLAG_DEVICE_TYPE="NOT_EXITS"
FLAG_ROOM_TYPE="NOT_EXITS"
edge_server_1.get_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE)
time.sleep(WAIT_TIME)

edge_server_1.set_status(FILTER_BY,DEVICE_ID,FLAG_DEVICE_TYPE,FLAG_ROOM_TYPE,FLAG_SWITCH_STATE,FLAG_TEMP_STATE,FLAG_INTENSITY)
time.sleep(WAIT_TIME)
















while True:
    try:
        time.sleep(0.5)
    #Disconnect the client from MQTT broker and stop the loop gracefully at
    # Keyboard interrupt (Ctrl+C)
    except KeyboardInterrupt:
        #edge_server_1.client.disconnect()
        #edge_server_1.client.loop_stop()
        break


# Creating the ac_device  
#print("\nCreating the AC devices for their respective rooms. ")
#ac_device_1 = AC_Device("ac_1", "BR1")
#time.sleep(WAIT_TIME)

#print("\nSmart Home Simulation stopped.")
#edge_server_1.terminate()
