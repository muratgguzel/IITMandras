Design Patterns
 - Optimal / Standard Solution
   for a given problem that was
   solved from years of research.
Categories of Design Patterns
 - Creational Patterns
This is a category of Design Pattern
that generalizes / provides 
an optimal Solution for creation of
objects in a Program / Product.

creation of objects == Instance of classes.
 - Singleton
 - Factory
 - Prototype
 - Builder (Case study)

Singleton
What?
This is a creational design pattern category
where Object of a class is created ONLY once
in a application lifecycle.
"I want to get an instance of a class to leverage
 a feature from my application "N times" however
 it should return the "SAME" object for all
 the "N times".

"SAME" object == Object from the 
                 "SAME" memory.

Analogy?
 - Capital of a State is ALWAYS "SAME"
 - The "Brand" of a Car Company 
   is ALWAYS "SAME"
 - Food Created in the morning (CREATED) 
   can be consumed (GET) across 
   the day (application lifecycle)

How?
 - obj = new ClassName() - 0xAFF
 - obj = new ClassName() - 0xAFF
 - obj = new ClassName() - 0xAFF
 - obj = new ClassName() - 0xAFF
1. Check if an Instance is already created?
 - By creating an Instance variable
2. If Yes, provide the created intance
3. If No, create a new instance.
Instance of a Class == Object

Multithread Scenario of Singleton
 - Double locking.

When?
 - Multiple Applications features needs
 - Save Memory usage of my program
    - Drivers for OS / IOT Devices / Database
    - DB Connections

Real world Examples?
 - Session Management
 - Caching
 - Shared Memory Features

Prototype
What?
This is a creational design pattern category
where object of a class is NOT created
instead COPIED (deepcopy).

NOT created == NOT using constructor
Objects are COPIED.

Create a Template Once and COPY to a new
memory location (instead of calling the 
constructor)

Analogy?
 - Creating something Identical from something
   Orginal.
 - Xerox / Photocopy of Pages from 
   an original document.

How?
 - How can you copy an object?
 - How to perform deepcopy?
    - copy package. (copy.deepcopy)

Shallowcopy and Deepcopy are different
types of copying techniques available across
programming languages.
Shallowcopy
A                B
(0x100)            
10
A ShallowCopy B (B is pointing to the address of A )
A                B
(0x100)         (0x100)   
10               10
20               20
0                 0
Pros : Shared memory
----------------------------------------
Deepcopy
A                B
(0x100)            
10
A DeepCopy B 
A                B
(0x100)         (0x200)
10               10
20               10
20               0
----------------------------------
When?
When will you copy?
 - When I don't know (Complexity)
 - When I don't want to know (Not Accountable)
When will you prototype pattern?
1. When Object creation is COMPLEX.
    - Depedencies are complex.
    - 5 Attributes, 5 Tables to fetch data.
2. When Object creation is NOT owned by my 
   team / module / business.

Real World Examples
 - Cart
Catalog / Inventory Management System
TV -> Vendors (LG, Sony)
Cart -> Clone a PRODUCT (TV) + Enrich that
        object with offers to update the
        price.

 - Mobile / Web App
   (Guest View and Admin View)
TheView -> Created for a Page
TheGuestView -> Prototype (TheView) + Disable Few controls
TheAdminView -> Prototype (TheView) + Enable Few controls

Prototype and SingleTon effectively create
the object ONLY once however in Singleton
its the same memory across all getInstance
when compared to prototype where new memory
is created for each clone.

Factory
What?
This is a creational design pattern category
where object of a class is created without
specifying the precise class name and is usually
based on a type / category.

Analogy?
 - Give me a Shoe of size X from a Factory
 - Give me a "category" / "choclate"
   of ice cream from a parlour
   Icecream (choclate object)
 - Login using Password / OTP
   AutheticationImpl.login()
How?
 - Create an abstraction for the
   objects based on category.
when?
 - Abstract / Hide / Deletegate
   the Object Creation
 - When there is a category / variety involved
   in entities.
"Type" / "Mode" / "category"
 ---> Factory.

Real World Examples
 - Connection of a DB from a client using a 
   ConnectionFactory
 - Implementation Authentication.
   OIDC, OAuth, OAuth2, SSO

Builder Pattern
 - This is a creational pattern where objects
   are created/constructed
   in an internal / seperate class


 - Structural Patterns
 - Behavioral Patterns

What?

How to Implement?

When to use?

Real World Examples

